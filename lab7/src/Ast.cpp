#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"
#include <iostream> //lab6
#include <assert.h> //lab6

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

//while栈
std::stack<WhileStmt*> whileStack; //lab6

//return类型检查_目标返回类型 lab6
Type* cur_retType = nullptr;
bool isInFunc = false;

bool funcReturned = false; //lab6
int genBr=0; //lab6
bool branchgen = false;//lab6

SymbolEntry* cur_func = nullptr;//lab6

Operand* Node::typeCast(Type* targetType, Operand* operand) { //lab6
    // 首先判断是否真的需要类型转化
    if(!TypeSystem::needCast(operand->getType()->toStr().c_str(), targetType->toStr().c_str())) {  //102
        return operand;
    }
    
    BasicBlock *bb = builder->getInsertBB();

    Operand* retOperand = new Operand(new TemporarySymbolEntry(targetType, SymbolTable::getLabel()));
    // 先实现bool扩展为int
    if(operand->getType()->isBool() && targetType->isInt()) 
    {
        // 插入一条符号扩展指令
        // fprintf(stderr,"\"Type Conversion\": bool -> int\n");
        new ZextInstruction(operand, retOperand, bb);
    }
    if(operand->getType()->isInt() && targetType->isBool())
    {
        fprintf(stderr,"\"Type Conversion\": int -> bool\n");
        Operand* zeroNode = new Operand(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        new CmpInstruction(CmpInstruction::NE, retOperand, zeroNode, operand, bb);      
    }
    return retOperand;
}

Node::Node()
{
    seq = counter++;
}

// //lab6
// Id::Id(SymbolEntry *se) : ExprNode(se)
// {

//     if(se->getType()->isConst())
//     {
//         dst = new Operand(se);
//     }
//     else
//     {
//         SymbolEntry *temp = new TemporarySymbolEntry(se->getType(), SymbolTable::getLabel()); 
//         dst = new Operand(temp);
//     }
// }



void Node::backPatch(std::vector<Instruction*> &list, BasicBlock*bb)
{
    for(auto &inst:list)
    {
        if(inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setTrueBranch(bb);
        else if(inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}

std::vector<Instruction*> Node::merge(std::vector<Instruction*> &list1, std::vector<Instruction*> &list2)
{
    std::vector<Instruction*> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void Constant::genCode()
{
    // we don't need to generate code.
    // fprintf(stderr,"Constant::genCode()\n");
}

void Id::genCode()
{
    // fprintf(stderr,"Id::genCode()\n");
    if(getType()->isConst()){ //lab6
        return; //常量标识符直接返回 ConstantSymbolEntry可获取value
    }
    
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    dst = new Operand(new TemporarySymbolEntry(dst->getType(), SymbolTable::getLabel()));
    new LoadInstruction(dst, addr, bb);
}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();

    //获取较精确的类型 int bool返回int lab6
    Type* maxType = TypeSystem::getMaxType(expr1->getType(), expr2->getType()); 
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  //trueBB放expr2的中间代码 expr1对了就跳到trueBB
        genBr = 1;
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList(); //不知道expr2对了跳到哪儿 expr2为真 和 BinaryExpr 为真 同一流向
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // Todo lab6
        BasicBlock *falseBB = new BasicBlock(func); //放expr2的中间代码 如果expr1是错的跳转到falseBB
        genBr = 1;
        // condlevel =0;
        expr1->genCode();
        backPatch(expr1->falseList(), falseBB);
        builder->setInsertBB(falseBB);
        expr2->genCode();
        true_list = merge(expr1->trueList(), expr2->trueList()); //都对了不知道跳到哪 
        false_list = expr2->falseList(); //expr2错了不知道跳到哪儿
    }
    else if(op >= EQUAL && op <= GREATERorEQUAL) //比较运算 有可能生成 有条件转移指令
    {
        // Todo lab6
        genBr--;
        // condlevel++;
        expr1->genCode();
        expr2->genCode();
        genBr++;
        // condlevel--;
        Operand *src1 = typeCast(maxType, expr1->getOperand());
        Operand *src2 = typeCast(maxType, expr2->getOperand());
        //是否需要对src1、src2做符号扩展
        int opcode = -1;
        
        switch (op)
        {
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case LESSorEQUAL:
            opcode = CmpInstruction::LE;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        case GREATERorEQUAL:
            opcode = CmpInstruction::GE;
            break;
        case EQUAL:
            opcode = CmpInstruction::E;
            break;
        case UNEQUAL:
            opcode = CmpInstruction::NE;
            break;
        }
        fprintf(stderr,"in ast op is %d\n",op);
        fprintf(stderr,"in ast opcode is %d\n",opcode);
        new CmpInstruction(opcode, dst, src1, src2, bb);
        if(genBr > 0)
        // if(condlevel<=0)
        {
            // 跳转目标block
            BasicBlock* trueBlock, *falseBlock, *mergeBlock;
            trueBlock = new BasicBlock(func);
            falseBlock = new BasicBlock(func);
            mergeBlock = new BasicBlock(func);
            true_list.push_back(new CondBrInstruction(trueBlock, falseBlock, dst, bb));
            false_list.push_back(new UncondBrInstruction(mergeBlock, falseBlock));
        }
    }
    else if(op >= ADD && op <= MOD)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = typeCast(maxType, expr1->getOperand()); //lab6
        Operand *src2 = typeCast(maxType, expr2->getOperand()); //lab6
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        case MULTI:
            opcode = BinaryInstruction::MUL;
            break;
        case DIVIDE:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

//lab6
void SingleExpr::genCode()
{
    // fprintf(stderr,"OneOpExpr::genCode()\n");
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    // (+-!!!a)
    if (op == SUB)//负
    {
        expr1->genCode();
        Operand *src1;
        Operand *src2;
        if(expr1->getType()->isBool()) {
            src1 = new Operand(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            src2 = typeCast(TypeSystem::intType, expr1->getOperand());
            int opcode = BinaryInstruction::SUB;//减
            new BinaryInstruction(opcode, dst, src1, src2, bb);
        }
        else if(expr1->getType()->isInt()){
            src1 = new Operand(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            src2 = typeCast(TypeSystem::intType, expr1->getOperand());
            int opcode = BinaryInstruction::SUB;
            new BinaryInstruction(opcode, dst, src1, src2, bb);
        }

    }
    else if(op == NOT)//非
    {
        this ->setType(TypeSystem::boolType);
        // fprintf(stderr,"SingleExpr NOT\n");
        genBr--;
        expr1->genCode();
        genBr++;
        Operand *src1 = new Operand(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        Operand *src2 = typeCast(TypeSystem::intType, expr1->getOperand());
        new CmpInstruction(CmpInstruction::E, dst, src1, src2, bb);
        if(genBr > 0) {
            // 跳转目标block
            // fprintf(stderr,"creat\n");
            BasicBlock* trueBlock, *falseBlock, *mergeBlock;
            trueBlock = new BasicBlock(func);
            falseBlock = new BasicBlock(func);
            mergeBlock = new BasicBlock(func);
            
            this -> true_list.push_back(new CondBrInstruction(trueBlock, falseBlock, dst, bb));
            this -> false_list.push_back(new UncondBrInstruction(mergeBlock, falseBlock));
        }
    }
}


void FunctionDef::genCode()
{
    // fprintf(stderr,"FunctionDef::genCode()\n");
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    if(params!=nullptr) //lab6
    { 
        params->genCode();
    }

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
   //lab6
   // 遍历Function中所有的BasicBlock，在各个BasicBlock之间建立控制流关系
    for (auto block = func->begin(); block != func->end(); block++) 
    {
        // 清除ret之后的全部指令
        Instruction* index = (*block)->begin();
        while(index != (*block)->end()) 
        {
            if(index->isRet()) {
                while(index != (*block)->rbegin()) {
                    (*block)->remove(index->getNext());
                }
                break;
            }
            index = index->getNext();
        }
        // 获取该块的最后一条指令
        Instruction* last = (*block)->rbegin();

        // 对于有条件的跳转指令，需要对其true分支和false分支都设置控制流关系
        if (last->isCond()) 
        {
            BasicBlock *trueBlock = dynamic_cast<CondBrInstruction*>(last)->getTrueBranch();
            BasicBlock *falseBlock = dynamic_cast<CondBrInstruction*>(last)->getFalseBranch();
            (*block)->addSucc(trueBlock);
            (*block)->addSucc(falseBlock);
            trueBlock->addPred(*block);
            falseBlock->addPred(*block);
        } 
        // 对于无条件的跳转指令，只需要对其目标基本块设置控制流关系即可
        if (last->isUncond()) 
        {
            BasicBlock* dstBlock = dynamic_cast<UncondBrInstruction*>(last)->getBranch();
            (*block)->addSucc(dstBlock);
            dstBlock->addPred(*block);
        }
    }     
   
}

//lab6
void FuncDefParamsNode::genCode()
{
    // fprintf(stderr,"FuncDefParamsNode::genCode()\n");

    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *entry = func->getEntry(); 
 
    for(auto id : paramsList)
    {
        func->insertparam(id->getOperand()); 
        IdentifierSymbolEntry* se = dynamic_cast<IdentifierSymbolEntry*>(id->getSymbolEntry());

        Type *type = new PointerType(id->getType());//声明参数类型的指针
        SymbolEntry *addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());//为参数类型指针建立临时变量符号表项
        
        Operand* addr = new Operand(addr_se); //参数类型的指针的符号表项的操作数
        Instruction *alloca = new AllocaInstruction(addr, se);// allocate space for local id in function stack.
       
        entry->insertFront(alloca); //首个基本块的第一条指令为分配指令                          // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);
        Operand *src = id->getOperand();
        fprintf(stderr,"src->getEntry()->isVariable %d\n",src->getEntry()->isVariable());
        fprintf(stderr,"src->getEntry()->isTemporary %d\n",src->getEntry()->isTemporary());
        new StoreInstruction(addr, src, entry);
    }
}

//lab6
void FuncCallParamsNode::genCode()
{
    // fprintf(stderr,"FuncCallParamsNode::genCode()\n");
    for(auto param : paramsList)
    {
        param -> genCode();
    }
}

//lab6
void FuncCallNode::genCode()
{
    // To do
    // fprintf(stderr,"FuncCallNode::genCode()\n");
    
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(funcId->getSymPtr());
    //库函数
    if(se->isLib())
    {
        this->builder->getUnit()->insertLibfunc(se);
    }

    BasicBlock *bb = builder->getInsertBB();
    //类型转换
    if (params != nullptr)
    {
        params->genCode();
        new CallInstruction(dst, dynamic_cast<IdentifierSymbolEntry*>(funcId->getSymPtr()), params->getOperandList(), bb);       
    }
    else
    {
        std::vector<Operand*> emptyparamList;
        new CallInstruction(dst, dynamic_cast<IdentifierSymbolEntry*>(funcId->getSymPtr()), emptyparamList, bb);        
    }
}


void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    genBr=1; //lab6

    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo lab6

    Function *func;
    BasicBlock *then_bb, *end_bb, *else_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);

    genBr=1;
    // condlevel = 0;
    cond->genCode();
    
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), else_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);
    
    builder->setInsertBB(else_bb);
    elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb);    

    builder->setInsertBB(end_bb);
}

void CompoundStmt::genCode()
{
    // Todo lab6
    stmt -> genCode();
}

void SeqNode::genCode()
{
    // Todo lab6
    stmt1 -> genCode();
    stmt2 -> genCode();
}

//lab6
void DeclStmt::genCode()
{
    // fprintf(stderr,"DeclStmt::genCode()\n");
    for(auto defnode:defList)
    {
        defnode -> genCode();
    }
}

//lab6
void DefNode::genCode()
{
    // fprintf(stderr,"DefNode::genCode()\n");

    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    
    if(id ->getType() -> isConst())
    {
        se->value = ((ConstantSymbolEntry*)((ExprNode*)Value)->getSymPtr())->getValue();
    }
    
    if(se->isGlobal())
    {
        if(Value != nullptr)
        {
            se->value = ((ConstantSymbolEntry*)((ExprNode*)Value)->getSymPtr())->getValue();            
        }

        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
        // 添加到全局变量
        this->builder->getUnit()->insertGlobal(se);
    }
    else if(se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        Operand *addr;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
        entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
    //store
    if(Value != nullptr)
    {
        BasicBlock *bb = builder->getInsertBB();
        Value->genCode();
        Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(id->getSymPtr())->getAddr();
        Operand *src = dynamic_cast<ExprNode *>(Value) ->getOperand();
        new StoreInstruction(addr, src, bb);
    }
}

void ReturnStmt::genCode()
{
    // Todo lab6
    // fprintf(stderr,"Return::genCode()\n");
    BasicBlock *bb = builder->getInsertBB();
    if(retValue != nullptr)
    {
        if(retType != retValue->getType())
        {
            // fprintf(stderr,"not matched type \n");

        }
        retValue->genCode();

        Operand* op = typeCast(retType, retValue->getOperand());

        // Operand* op = retValue->getOperand();
        new RetInstruction(op, bb);
    }
    else
    {
        new RetInstruction(nullptr, bb);
    }
}

void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

//lab6
void EmptyStmt::genCode()
{
    // fprintf(stderr,"EmptyStmt::genCode()\n");  
}

//lab6
void WhileStmt::genCode()
{
    // fprintf(stderr,"WhileStmt::genCode()\n");
    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *bb = builder->getInsertBB();

    BasicBlock *cond_bb, *end_bb, *loop_bb;

    cond_bb = new BasicBlock(func);
    loop_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    this->condBlock = cond_bb;
    this->endBlock = end_bb;

    new UncondBrInstruction(cond_bb, bb);

    builder->setInsertBB(cond_bb);
    genBr = 1;
    // condlevel = 0;
    cond->genCode();
    backPatch(cond->trueList(), loop_bb);
    backPatch(cond->falseList(), end_bb);

    //break continue
    builder->setInsertBB(loop_bb);
    loopStmt->genCode();

    loop_bb = builder->getInsertBB();
    new UncondBrInstruction(cond_bb, loop_bb);

    builder->setInsertBB(end_bb);
}

//lab6
void BreakStmt::genCode()
{
    // fprintf(stderr,"BreakStmt::genCode()\n");
    BasicBlock *bb = builder->getInsertBB(); 
    Function* func = builder->getInsertBB()->getParent();

    new UncondBrInstruction(whileStmt->getEnd(), bb);

    BasicBlock* succ_bb = new BasicBlock(func);
    builder->setInsertBB(succ_bb);
}

//lab6
void ContinueStmt::genCode()
{
    // fprintf(stderr,"ContinueStmt::genCode()\n");
    BasicBlock *bb = builder->getInsertBB(); 
    Function* func = builder->getInsertBB()->getParent();

    new UncondBrInstruction(whileStmt->getCond(), bb);

    BasicBlock* succ_bb = new BasicBlock(func);
    builder->setInsertBB(succ_bb);
}

//lab6
void ExprStmtNode::genCode()
{
    fprintf(stderr,"ExprStmtNode::genCode()\n");
    for(auto expr:exprList)
    {
        expr -> genCode();
    }
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck();
}

void BinaryExpr::typeCheck()
{
    // Todo lab6
    expr1->typeCheck();
    expr2->typeCheck();

    Type* expr1_type = expr1->getType();
    Type* expr2_type = expr2->getType();

    if(expr1->getType()->isFunc()) expr1_type = ((FunctionType*)expr1->getType())->getRetType();
    if(expr2->getType()->isFunc()) expr2_type = ((FunctionType*)expr2->getType())->getRetType();

    //返回值为 void 的函数调用结果参与了某表达式计算 类型检查3
    if(expr1_type->isVoid() == true || expr2_type->isVoid() == true)
    {
        fprintf(stderr, "invalid operands of types 'void' to binary operation ");
        exit(EXIT_FAILURE);
    }

    //int 至 bool 类型转换 类型检查2
    if(op == AND || op == OR) 
    {
        if(!expr1->getType()->isBool() || expr1->getSymPtr()->isConstant()) {
            Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::UNEQUAL, zeroNode, expr1);
            expr1 = newCond;
        }
        if(!expr2->getType()->isBool() || expr2->getSymPtr()->isConstant()) {
            Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::UNEQUAL, zeroNode, expr2);
            expr2 = newCond;
        }
    }
}

//lab6
void SingleExpr::typeCheck()
{
    // fprintf(stderr,"SingleExpr::typeCheck()\n");
    expr1->typeCheck();

    Type* expr1_type = expr1->getType();

    if(expr1->getType()->isFunc()) expr1_type = ((FunctionType*)expr1->getType())->getRetType();


    //返回值为 void 的函数调用结果参与了某表达式计算 类型检查3
    if(expr1_type->isVoid() == true )
    {
        fprintf(stderr, "invalid operands of types 'void' to unary operation ");
        exit(EXIT_FAILURE);
    }

    //隐式转换
    // if(op == SUB) this ->setType(TypeSystem::intType);
    // else this ->setType(TypeSystem::boolType);

}

void Constant::typeCheck()
{
    // Todo
}

void Id::typeCheck()
{
    // Todo
}

//lab6
void FuncCallParamsNode::typeCheck()
{
    // To do
    // fprintf(stderr,"FuncCallParamsNode::typeCheck()\n");
    for(ExprNode* param : paramsList) {
        param->typeCheck();
    }
}

//lab6
void FuncCallNode::typeCheck()
{
    // To do
    // fprintf(stderr,"FuncCallNode::typeCheck()\n");
    //类型检查5
    //函数调用 形参实参数目不一致
    std::vector<Type*> funcParamsType = (dynamic_cast<FunctionType*>(this->funcId->getType()))->getParamsType();
    int funcParamsNUM = funcParamsType.size();
    if(this->params == nullptr)
    {
        if(funcParamsNUM!=0)
        {
            fprintf(stderr,"wrong number of arguments to function \"%s\" \n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);            
        }
        else return;
    }
    
    std::vector<Type*> callParamsType = this->params->getParamsType();
    
    int callParamsNUM = callParamsType.size();
    if(funcParamsNUM != callParamsNUM)
    {
        fprintf(stderr,"wrong number of arguments to function \"%s\" \n",this->funcId->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    //类型不匹配（实参可能是函数返回值导致）
    for(int i=0; i<callParamsNUM; i++)
    {
        Type* funcparamType = funcParamsType[i];
        Type* callparamType = callParamsType[i];
        if((funcparamType->isVoid() && !callparamType->isVoid()) || (!funcparamType->isVoid() && callparamType->isVoid()))
        {
            fprintf(stderr,"Unmatched call argument type to function %s \n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
}

//lab6
void FuncDefParamsNode::typeCheck()
{
    // To do
    // fprintf(stderr,"FuncDefParamsNode::typeCheck()\n");
}

void FunctionDef::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"FunctionDef::typeCheck()\n");
    isInFunc = true;
    cur_retType = ((FunctionType*) se->getType())->getRetType();
    cur_func = se;

    // 判断函数是否返回
    funcReturned = false;
    stmt -> typeCheck();
    //针对函数没有return语句 类型检查6
    if(!funcReturned && !cur_retType->isVoid()){
        fprintf(stderr, " \"%s\" : expected a %s type to return, but no returned value found\n", se->toStr().c_str(),cur_retType->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    cur_retType = nullptr;
    isInFunc = false;
    cur_func = nullptr;
}


void IfStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"IfStmt::typeCheck()\n");

    //int 至 bool 类型转换 类型检查2
    if(!cond->getType()->isBool() || cond->getSymPtr()->isConstant()) 
    {
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::UNEQUAL, zeroNode, cond);
        cond = newCond;
        fprintf(stderr,"\"Type Conversion\": int -> bool\n");
    }

    cond->typeCheck();

    if(thenStmt != nullptr) 
    {
        thenStmt -> typeCheck();
    }
}

void IfElseStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"IfElseStmt::typeCheck()\n");
    
    cond -> typeCheck();

    //int 至 bool 类型转换 类型检查2
    if(!cond->getType()->isBool() || cond->getSymPtr()->isConstant()) 
    {
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::UNEQUAL, zeroNode, cond);
        cond = newCond;
        fprintf(stderr,"\"Type Conversion\": int -> bool\n");
    }

    
    if(thenStmt != nullptr) thenStmt -> typeCheck();
    if(elseStmt != nullptr) elseStmt -> typeCheck();
}

void CompoundStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"CompoundStmt::typeCheck()\n");
    if (stmt != nullptr) stmt ->typeCheck();
    else stmt = new EmptyStmt(); //102
}

void SeqNode::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"SeqNode::typeCheck()\n"); 
    if(stmt1 != nullptr) stmt1 ->typeCheck();
    if(stmt2 != nullptr) stmt2 -> typeCheck();
}

void DeclStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"DeclStmt::typeCheck()\n");
    for(auto defnode:defList)
    {
        defnode -> typeCheck();
    } 
}

//lab6
void DefNode::typeCheck()
{
    // fprintf(stderr,"DefNode::typeCheck()\n");

    id -> typeCheck();
    if (Value == nullptr) return;
    Value -> typeCheck();

}

void ReturnStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"ReturnStmt::typeCheck()\n");
    //return应该在函数定义

    this->retType = cur_retType;
    if (isInFunc == false)
    {
        fprintf(stderr,"\"@%s\": expected unqualified-id before 'return' \n",((IdentifierSymbolEntry*)cur_func)->getName().c_str());
        exit(EXIT_FAILURE);
    }
    else
    {
        if (cur_retType -> isVoid())
        {
            if(retValue != nullptr)  //无return值 但 函数非void
            {
                fprintf(stderr,"\"@%s\": return-statement with a value, in function returning 'void' \n",((IdentifierSymbolEntry*)cur_func)->getName().c_str());
                exit(EXIT_FAILURE);
            }
        }
        else
        {
            if(retValue == nullptr)//有return值 但 函数是void
            {
                fprintf(stderr, "\"@%s\": return-statement with no value, in function returning '%s' \n ",((IdentifierSymbolEntry*)cur_func)->getName().c_str(),cur_retType->toStr().c_str());
                exit(EXIT_FAILURE);
            }
        }
    }
    if(retValue != nullptr) retValue->typeCheck();
    funcReturned = true;
}

void AssignStmt::typeCheck()
{
    // Todo lab6
    // fprintf(stderr,"AssignStmt::typeCheck()\n");
    lval->typeCheck();
    expr->typeCheck();
}

//lab6
void EmptyStmt::typeCheck()
{
    // Do Nothing
    // fprintf(stderr,"EmptyStmt::typeCheck()\n");   
}

//while/break/continue_typeCheck finished
//lab6
void WhileStmt::typeCheck()
{
    // Do Nothing
    //Modify 
    //检查cond是否有真值，对loopStmt做类型检查 维护while栈
    // fprintf(stderr,"WhileStmt::typeCheck()\n");

    //int 至 bool 类型转换 类型检查2
    if(!cond->getType()->isBool() || cond->getSymPtr()->isConstant())
     {
        fprintf(stderr,"\"Type Conversion\": int -> bool\n");
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::UNEQUAL, zeroNode, cond);
        cond = newCond;
        
    }
    whileStack.push(this);

    cond ->typeCheck();

    if(loopStmt != nullptr)
    {
        loopStmt->typeCheck();
    }

    whileStack.pop();   
}

//lab6
void BreakStmt::typeCheck()
{
    // fprintf(stderr,"BreakStmt::typeCheck()\n"); 
    if (whileStack.size() == 0)
    {
        fprintf(stderr,"break statement not within a loop \n");
        exit(EXIT_FAILURE);
    }
    else this -> whileStmt = whileStack.top();

}

//lab6
void ContinueStmt::typeCheck()
{
    // fprintf(stderr,"ContinueStmt::typeCheck()\n"); 
    // Do Nothing
    //Modify Advanced 
    //检查是否处于循环中
    if (whileStack.size() == 0)
    {
        fprintf(stderr,"continue statement not within a loop \n");
        exit(EXIT_FAILURE);
    }
    else this -> whileStmt = whileStack.top();
}

//lab6
void ExprStmtNode::typeCheck()
{
    // fprintf(stderr,"ExprStmtNode::typeCheck()\n"); 
    for(auto expr:exprList)
    {
        expr -> typeCheck();
    }     
}

//lab6
void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case MULTI:
            op_str = "mul";
            break;
        case DIVIDE:
            op_str = "div";
            break;
        case MOD:
            op_str = "mod";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case LESS:
            op_str = "less";
            break;
        case LESSorEQUAL:
            op_str = "lesseq";
            break;
        case GREATER:
            op_str = "great";
            break;
        case GREATERorEQUAL:
            op_str = "greateq";
            break;
        case EQUAL:
            op_str = "eq";
            break;
        case UNEQUAL:
            op_str = "neq";
            break;
    }
    // fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

//ExprStmtNode lab6
void ExprStmtNode::addNext(ExprNode* next)
{
    exprList.push_back(next);
}

//lab6
void ExprStmtNode::output(int level)
{
    fprintf(yyout, "%*cExprStmtNode\n", level, ' ');
    for(auto expr : exprList)
    {
        expr->output(level+4);
    }
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

//lab6
void SingleExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case SUB:
            op_str = "sub";
            break;
        case NOT:
            op_str = "not";
            break;  
    }
    fprintf(yyout, "%*cSingleExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    stmt1->output(level);
    stmt2->output(level);
}

//lab6
void DefNode::output(int level)
{
    //Modify 数组
    std::string constStr = isConst ? "Const" : "Variable";
    fprintf(yyout, "%*cDefNode\t%s\n", level, ' ', constStr.c_str());
    id->output(level+4);
    if(Value == nullptr){
        fprintf(yyout, "%*cThis variable/constant is not assigned\n", level+4, ' ');
    }
    else{
        Value->output(level+4);
    }
}

//lab6
void DeclStmt::addNext(DefNode* next)
{
    defList.push_back(next);
}

//lab6
void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    for(auto it	: defList)
	{
		it -> output(level);
	}
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());

    //lab6
    if(params!=nullptr){
        params->output(level+4);
    }
    else{
        fprintf(yyout, "%*cFuncDefParamsNode NULL\n", level+4, ' ');
    }

    stmt->output(level + 4);
}

//lab6
void FuncDefParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncDefParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}

//lab6
void FuncDefParamsNode::addNext(Id* next)
{
    paramsList.push_back(next);
}

//lab6
std::vector<Type*> FuncDefParamsNode::getParamsType()
{
    std::vector<Type*> typeArray;
    for(auto param : paramsList){
        typeArray.push_back(param->getType());
    }
    return typeArray;
}

//lab6
//Empty/while/break/continue_output finished
void EmptyStmt::output(int level)
{
    fprintf(yyout, "%*cEmptyStmt\n", level, ' ');
}

//lab6
void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    loopStmt->output(level + 4);
}

//lab6
void BreakStmt::output(int level)
{
    fprintf(yyout, "%*cBreakStmt\n", level, ' ');
}

//lab6
void ContinueStmt::output(int level)
{
    fprintf(yyout, "%*cContinueStmt\n", level, ' ');
}

//FuncCallParamsNode //lab6
void FuncCallParamsNode::addNext(ExprNode* next)
{
    paramsList.push_back(next);
}

//lab6
void FuncCallParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncCallParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}

//lab6
std::vector<Type*> FuncCallParamsNode::getParamsType()
{
    std::vector<Type*> typeArray;
    for(auto param : paramsList){
        typeArray.push_back(param->getType());
    }
    return typeArray;
}

//lab6
std::vector<ExprNode*> FuncCallParamsNode::getParamsList()
{
    return this->paramsList;
}

//lab6
std::vector<Operand*> FuncCallParamsNode::getOperandList()
{
    std::vector<Operand*> operandArray;
    for(auto param : paramsList){
        operandArray.push_back(param->getOperand());
    }
    return operandArray;
}

//lab6
//FuncCallNode
void FuncCallNode::output(int level)
{
    std::string name, type;
    int scope;
    SymbolEntry* funcEntry = funcId->getSymbolEntry();
    name = funcEntry->toStr();
    type = funcEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(funcEntry)->getScope();
    fprintf(yyout, "%*cFuncCallNode\tfuncName: %s\t funcType: %s\tscope: %d\n", 
            level, ' ', name.c_str(), type.c_str(), scope);
    if(params!=nullptr){
        params->output(level+4);
    }
    else{
        fprintf(yyout, "%*cFuncCallParamsNode NULL\n", level+4, ' ');
    }
}